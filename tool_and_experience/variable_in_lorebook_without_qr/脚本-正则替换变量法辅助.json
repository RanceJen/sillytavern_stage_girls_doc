    "id": "6804faff-4288-4a7d-9d6f-47dec6e8e00a",
    "scriptName": "脚本-正则替换变量法辅助",
    "findRegex": "",
    "replaceString": "<script>\nvar __webpack_exports__ = {};\n\nconst variable_regex = /@(.*?)@?=(?:.*?⇒)?'?(.*?)'?((@$)|(?=@))/gm;\n/**\n * 解析文本中的所有 `\"@变量=值@\"` 和 `\"@变量=旧值⇒新值@\"`, 转换为键值对对象\n *\n * @param text 要解析的文本\n * @returns 解析得到的键值对对象\n */\nfunction parseVariables(text) {\n    return _.merge({}, ...[...text.matchAll(variable_regex)].map(match => ({ [match[1]]: match[2] })));\n}\n/**\n * 在最后一条 ai 消息附加 `@变量=值@` 从而更新变量\n *\n * @param data 要更新的变量和值\n *\n * @example\n * await updateLastVariables({\n *   '变量.络络.亲密度': 60,\n *   '变量.络络.下次响应界面选择判断': 2,\n * });\n */\nasync function updateLastVariables(data) {\n    const last_char_message_id = await getChatMessages('0-{{lastMessageId}}', { role: 'assistant' }).then(messages => {\n        return messages.at(-1).message_id;\n    });\n    await updateVariablesAt(last_char_message_id, data);\n}\n/**\n * 在第 `message_id` 楼消息附加 `@变量=值@` 从而更新变量\n *\n * @param message_id 消息楼层号, 必须确保是 ai 消息才能正确更新\n * @param data 要更新的变量和值\n *\n * @example\n * await updateVariablesAt(0, {\n *   '变量.络络.亲密度': 60,\n *   '变量.络络.下次响应界面选择判断': 2,\n * });\n */\nasync function updateVariablesAt(message_id, data) {\n    const messages = await getChatMessages(message_id, { role: 'assistant' });\n    if (messages.length <= 0) {\n        return;\n    }\n    const message = messages[0].message;\n    await setChatMessage({\n        message: message + Object.entries(data).map(([key, value]) => `\\n@${key}=${value}@`),\n    }, message_id, { refresh: 'none' });\n}\n$(() => {\n    // 其他地方的代码可使用 `eventEmit('在最新楼层更新变量', {变量1: 值, 变量2: 值})` 来更新变量\n    // 快速回复中可使用 `/event-emit event=在最新楼层更新变量 data={\"变量.好感度1\": 5, \"变量.好感度2\": 10}` 来更新变量并发送新消息\n    eventOn('在最新楼层更新变量', updateLastVariables);\n    // 其他地方的代码可使用 `eventEmit('更新变量并发送新的玩家输入', {变量1: 值, 变量2: 值}, \"玩家输入\")` 来更新变量并发送新消息\n    // 快速回复中可使用 `/event-emit event=更新变量并发送新的玩家输入 data={\"变量.好感度1\": 5, \"变量.好感度2\": 10} data=\"玩家输入\"` 来更新变量并发送新消息\n    eventOn('更新变量并发送新的玩家输入', async (data, text) => {\n        await updateLastVariables(data);\n        triggerSlash(`/send ${text} || /trigger`);\n    });\n    // 其他地方的代码可使用 `eventEmit('检测输入中的变量更新并发送新的玩家输入', \"@变量1=值@@变量2=值@玩家输入\")` 来更新变量并发送新消息\n    // 快速回复中可使用 `/event-emit event=检测输入中的变量更新并发送新的玩家输入 \"@变量1=值@@变量2=值data=\"玩家输入\"` 来更新变量并发送新消息\n    eventOn('检测输入中的变量更新进行更新并发送新的玩家输入', async (text) => {\n        await updateLastVariables(parseVariables(text));\n        triggerSlash(`/send ${text.replaceAll(variable_regex, '').replace('^@', '').trim()} || /trigger`);\n    });\n});\n</script>",
    "trimStrings": [],
    "placement": [],
    "disabled": false,
    "markdownOnly": false,
    "promptOnly": false,
    "runOnEdit": false,
    "substituteRegex": 0,
    "minDepth": null,
    "maxDepth": null
}