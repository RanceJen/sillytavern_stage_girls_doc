{
    "id": "d0b760b3-b801-4a77-8b53-74340f57d94c",
    "scriptName": "脚本-正则替换变量法辅助",
    "findRegex": "",
    "replaceString": "<script>\nvar __webpack_exports__ = {};\n\nconst variable_regex = /@(.*?)@?=(?:.*?⇒)?'?(.*?)'?((@$)|(?=@))/gm;\n$(() => {\n    // 其他地方的代码可使用 `eventEmit('在最新楼层更新变量', {心爱受孕: 否, 心爱好感度: 10})` 来更新变量\n    // 快速回复中可使用 `/event-emit event=在最新楼层更新变量 data={\"心爱受孕\": \"否\", \"心爱好感度\": 10}` 来更新变量\n    eventOn('在最新楼层更新变量', updateLastVariables);\n    // 修复和摘要/总结正则的兼容性\n    eventOn(tavern_events.MESSAGE_SENT, propagateVariables);\n    eventOn(tavern_events.MESSAGE_RECEIVED, propagateVariables);\n});\n/**\n * 解析文本中的所有 `\"@变量=值@\"` 和 `\"@变量=旧值⇒新值@\"`, 转换为键值对对象\n *\n * @param text 要解析的文本\n * @returns 解析得到的键值对对象\n *\n * @example\n * const variables = parseVariables(\"@心爱受孕=否@@心爱好感度=10@\");\n * console.info(variables.心爱受孕);  // 否\n * console.info(variables.心爱好感度);  // 10\n */\nfunction parseVariables(text) {\n    return _.merge({}, ...[...text.matchAll(variable_regex)].map(match => ({ [match[1]]: match[2] })));\n}\n/**\n * 将键值对对象转换为 `\"@变量=值@\"` 字符串\n *\n * @param data 键值对对象\n * @returns 转换得到的字符串\n *\n * @example\n * const string = stringifyVariables({心爱受孕: 否, 心爱好感度: 10});\n * console.info(string);  // @心爱受孕=否@\n *                        // @心爱好感度=10@\n */\nfunction stringifyVariables(data) {\n    return `${Object.entries(data)\n        .map(([key, value]) => `@${key}=${value}@`)\n        .join('\\n')}`;\n}\n/**\n * 在最后一条消息附加 `@变量=值@` 从而更新变量\n *\n * @param data 要更新的变量和值\n *\n * @example\n * await updateLastVariables({\n *   '变量.络络.亲密度': 60,\n *   '变量.络络.下次响应界面选择判断': 2,\n * });\n */\nasync function updateLastVariables(data) {\n    await updateVariablesAt(SillyTavern.chat.length - 1, data);\n}\n/**\n * 在第 `message_id` 楼消息附加 `@变量=值@` 从而更新变量\n *\n * @param message_id 消息楼层号\n * @param data 要更新的变量和值\n *\n * @example\n * await updateVariablesAt(0, {\n *   '变量.络络.亲密度': 60,\n *   '变量.络络.下次响应界面选择判断': 2,\n * });\n */\nasync function updateVariablesAt(message_id, data) {\n    const messages = await getChatMessages(message_id);\n    if (messages.length <= 0) {\n        return;\n    }\n    const message = messages[0].message;\n    await setChatMessage({\n        message: message + `\\n<UpdateVariable>\\n${stringifyVariables(data)}\\n</UpdateVariable>`,\n    }, message_id, { refresh: 'none' });\n}\nasync function propagateVariables() {\n    const last_chat = SillyTavern.chat.at(-1);\n    const data = _.merge({}, ...SillyTavern.chat.slice(-3).map((chat) => parseVariables(chat.mes)));\n    const updated_message = last_chat.mes.replace(/(?:\\n<UpdateVariable>\\n<FullUpdateVariable>.*?<\\/FullUpdateVariable>\\n<\\/UpdateVariable>)|$/s, `\\n<UpdateVariable>\\n<FullUpdateVariable>\\n${stringifyVariables(data)}\\n</FullUpdateVariable>\\n</UpdateVariable>`);\n    if (last_chat.swipes) {\n        last_chat.swipes[last_chat.swipe_id] = updated_message;\n    }\n    last_chat.mes = updated_message;\n    await SillyTavern.saveChat();\n}\n</script>",
    "trimStrings": [],
    "placement": [],
    "disabled": false,
    "markdownOnly": false,
    "promptOnly": false,
    "runOnEdit": false,
    "substituteRegex": 0,
    "minDepth": null,
    "maxDepth": null
}