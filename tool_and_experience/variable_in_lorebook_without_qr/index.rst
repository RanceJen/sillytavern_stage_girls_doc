########################################################################################################################
角色阶段: 精确记录最新数值、为不同角色绑定不同变量、为每个阶段显示特殊名称
########################################################################################################################

`原帖 <https://discord.com/channels/1134557553011998840/1308984948794982421>`_

络络的更宝宝级教程
  - `discord <https://discord.com/channels/1134557553011998840/1356503085475958834>`_
  - `智识库网页 <https://wiki.类脑.org/智识库/类脑教程/酒馆使用/超简单版本：基于提示词模板的分阶段好感度人设>`_
  - `示例角色卡 <https://files.catbox.moe/w2r2g6.png>`_

精确记录最新数值
  采用聊天变量记录数值, 并相比于 QuickReply 容易出错, 这种方式能够保证删除楼层或重 roll 后变量依旧正确.

为不同角色绑定不同变量 (仅复杂版实现)
  某个角色应该用好感度, 另一个角色却要用堕落度? 某个角色的数值跨度是每增加 10 点更新一个阶段, 另一个却是每减少 1 点更新一个阶段? 没问题.

为每个阶段显示特殊名称 (仅复杂版实现)
  总是在状态栏显示数值太无聊了? 让 ai 自觉地更新角色阶段名称吧: 羞涩抗拒(0~24)-欲拒还迎(25~49)-共犯默契(50~74)-沉沦释放(75~99)-灵肉相许(100以上).

.. note::

  以下内容默认依赖于递归扫描 (一个条目被发送的文本激活后, 条目中的文本会激活更多条目), 因此我有一个 "角色-激活" 列表; 不担心递归导致 token 爆炸则不需要这样考虑.

========================================================================================================================
原理
========================================================================================================================

通过发送 ``{{setvar::心爱好感度::0}}``, 我们可以在当前聊天中设置一个变量 ``心爱好感度``, 之后发送 ``{{getvar::心爱好感度}}`` 即能得到对应的值. 这样的变量是在当前聊天中有效的, 被记录在聊天文件的开头.

.. figure:: 聊天文件开头.png

因此, 我们只需要让 ai 能够更新这个变量, 并用这个变量进行正则匹配, 即可得到精确的结果.

但我们很难直接要求 ai 回复 ``{{setvar::变量名::更新的值}}``, 因为我们无论通过输入还是世界书, 向 ai 发送这个要求时, 这部分都会被替代为一次变量设置.

.. figure:: 不能直接要求.png

  发送给 ai ``你必须在回应中给出 {{setvar::心爱好感度::新的值}}`` 时实际发送的内容

所以我们需要要求 ai 回应一种特定格式来表示变量更新, 并通过正则匹配, 将它输出的特定格式替换为 ``{{setvar::变量名::更新的值}}``. 我采用的格式如下:

.. code-block:: text

  @${变量名$}=${旧值$}→${新值$}@

========================================================================================================================
实现
========================================================================================================================

文本中所有的 ``# 注释`` 都是本教程的注释, 并不是条目实际内容.

我写角色卡是在 VSCode 中编写条目, 再使用 :doc:`脚本 </tool_and_experience/lorebook_script/index>` 将它同步到酒馆中. 在这个过程中脚本会对内容进行压缩, 因而酒馆里的世界书比较难读. 因此, **看示例角色卡时别忘了下载它的世界书源文件**.

.. toctree::
  :maxdepth: 1

  simple/index
  complex/index

========================================================================================================================
调试方法
========================================================================================================================

------------------------------------------------------------------------------------------------------------------------
安装 SillyTavern Variable Viewer 插件
------------------------------------------------------------------------------------------------------------------------

安装 ``https://github.com/LenAnderson/SillyTavern-Variable-Viewer/`` 插件, 方法见图:

.. figure:: 打开安装插件界面.png

.. figure:: 进行安装.png

然后, 你可以在聊天框输入 ``/variableviewer`` 来开关变量查看器.

------------------------------------------------------------------------------------------------------------------------
查看变量变化情况
------------------------------------------------------------------------------------------------------------------------

如果要在每次 ai 输出时能直接查看变量的更新情况, 可以用示例角色卡中的 "调试: 设置变量"、"调试: 隐藏变量更新分析" 和 "调试: 隐藏变量更新" 正则.

------------------------------------------------------------------------------------------------------------------------
确认变量是否更新
------------------------------------------------------------------------------------------------------------------------

.. warning::

  这样的查看方式存在延迟, "设置变量" 正则同时启用了 "仅格式显示" 和 "仅格式提示词", 变量除了因为 "仅格式显示" 在刷新网页、加载聊天等更新外, 还会在发送消息时更新.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
通过酒馆
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

你可以在聊天区任意位置或者发送 ``{{getvar::变量::值}}`` 来获取最新的变量值, 也可以发送 ``/echo {{getvar::变量::值}}`` 等来得知.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
通过聊天文件
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

变量被记录在聊天文件开头, 你可以导出聊天文件或去存档 (一般在 ``SillyTavern/default-user/chats/角色卡名称/聊天文件``, 更推荐这种, 用 VSCode 打开能看见变量实时更新) 来获取聊天文件, 然后用记事本、VSCode 等查看聊天文件开头

.. figure:: 聊天文件开头.png

========================================================================================================================
与摘要/总结的冲突问题
========================================================================================================================

有的玩家喜欢设置摘要 (有的地方叫做总结), 然后使用摘要正则去掉较前面 ai 楼层中的正文而仅保留摘要. 为了兼容摘要正则, 你必须:

- 不在 ai 消息以外的地方更新变量.
- 不使用 ``@变量=值@`` 或 ``@变量=旧值⇒新值@`` 以外的方式更新变量.
- 确保摘要正则的最小深度必须被设置而且大于等于 2, 即要保证最新的一条 ai 消息在重 roll 和删除消息时能被应用.

也就是说, **一旦采用本教程的方法, 你只能在 ai 消息中用教程中的格式更新变量.**

这是因为本教程的方法依赖于局部正则中的变量更新正则, 而仅保留摘要正则一般被放在全局正则中, 因而仅保留摘要正则先于变量更新正则被执行: 在变量更新正则对 ``@变量=值@`` 发生作用而更新变量之前, 仅保留摘要正则已经将 ``@变量=值@`` 去除掉了!

.. hint::

  如果有在玩家互动时更新变量的需求, 请使用 `酒馆助手 <https://n0vi028.github.io/JS-Slash-Runner-Doc/>`_ 中的 ``getChatMessage`` 和 ``setChatMessage`` 将内容附在 ai 消息末尾.

  .. admonition:: 本教程在酒馆助手中的更新函数
    :class: dropdown

    .. code-block:: typescript
      :linenos:

      /**
       * 在最后一条 ai 消息附加 `@变量=值@` 从而更新变量
       *
       * @param data 要更新的变量和值
       *
       * @example
       * await updateLastVariables({
       *   '变量.络络.亲密度': 60,
       *   '变量.络络.下次响应界面选择判断': 2,
       * });
       */
      async function updateLastVariables(data: Record<string, any>) {
        const last_char_message_id = await getChatMessages('0-{{lastMessageId}}', { role: 'assistant' }).then(
          messages => (messages.at(-1) as ChatMessage).message_id,
        );
        await updateVariablesAt(last_char_message_id, data);
      }

      /**
       * 在第 `message_id` 楼消息附加 `@变量=值@` 从而更新变量
       *
       * @param message_id 消息楼层号, 必须确保是 ai 消息才能正确更新
       * @param data 要更新的变量和值
       *
       * @example
       * await updateVariablesAt(0, {
       *   '变量.络络.亲密度': 60,
       *   '变量.络络.下次响应界面选择判断': 2,
       * });
       */
      async function updateVariablesAt(message_id: number, data: Record<string, any>) {
        const messages = await getChatMessages(message_id, { role: 'assistant' });
        if (messages.length <= 0) {
          return;
        }

        const message = messages[0].message;
        await setChatMessage(
          {
            message: message + Object.entries(data).map(([key, value]) => `\n@${key}=${value}@`),
          },
          message_id,
          { refresh: 'none' },
        );
      }

      $(() => {
        // 其他地方的代码可使用 `eventEmit('在最新楼层更新变量', {变量1: 值, 变量2: 值})` 来更新变量
        eventOn('在最新楼层更新变量', updateLastVariables);

        // 其他地方的代码可使用 `eventEmit('更新变量并发送新玩家输入', {变量1: 值, 变量2: 值}, "玩家输入")` 来更新变量并发送新消息
        eventOn('更新变量并发送新玩家输入', async (data: Record<string, any>, input: string) => {
          await updateLastVariables(data);
          triggerSlash(`/send ${input} || /trigger`);
        });
      });


------------------------------------------------------------------------------------------------------------------------
如果在 ai 消息以外的地方更新变量
------------------------------------------------------------------------------------------------------------------------

你也许想过在 user 消息之类的地方填写 ``@变量=值@``, 但这是行不通的. 仅保留摘要正则会去除以前 ai 消息中的 ``@变量=值@``, 因此如果我们在 user 消息中更新变量, 可能会发生很奇妙的变化:

.. code-block:: text

  ai: @心爱受孕=否@
  user: @心爱受孕=是@
  ai: @心爱受孕=否@
  user: ...
  ai: ...

这段内容中的变量更新情况将会从上到下依次应用, 因此 ``心爱受孕=否``.

但如果有摘要就不再是这样:

.. code-block:: text

  ai: ...
  user: @心爱受孕=是@
  ai: ...
  user: ...
  ai: ...

摘要去掉了以前 ai 消息中的变量更新, 因此 ``心爱受孕=是``.

------------------------------------------------------------------------------------------------------------------------
如果不确保摘要正则的最小深度
------------------------------------------------------------------------------------------------------------------------

如果不确保摘要正则的最小深度, 本方法将不能在重 roll 或删除消息后尽量地回退变量值, 具体原因见下文.

========================================================================================================================
与 ``{{user}}`` 的冲突问题
========================================================================================================================

酒馆不支持嵌套宏, 因此不要用 ``{{user}}`` 作为变量名, 而应该用 ``<user>``.

不支持嵌套宏体现在哪呢? ``{{setvar::变量::值}}`` 和 ``{{user}}`` 都是宏, 但 ``{{setvar::被{{user}}接受感情::否}}`` 会被视为 ``{{setvar::被{{user}}`` 和 ``接受感情::否}}``, 而不是先替代内层的 ``{{user}}``, 再替代外层的 ``{{setvar::变量::值}}``.

========================================================================================================================
与酒馆仅加载前 n 条消息的兼容性
========================================================================================================================

如果玩家在酒馆中设置了 "仅加载前 n 条消息", 则他在上滑手动加载以前消息时, 变量将会因旧聊天消息的加载而更新成旧值.

**这一般不会有问题**: "设置变量" 正则同时启用了 "仅格式显示" 和 "仅格式提示词", 变量除了因为 "仅格式显示" 在刷新网页、加载聊天等更新外, 还会在发送消息时更新.

但是, 被 ``/hide`` 隐藏的消息中的变量更新能通过 "仅格式显示" 被正确设置, 而不能通过 "仅格式提示词" 来得到设置. 这就导致了两种特殊情况, 但我认为一般不会有玩家这么处理消息, 哪怕总结姬也很难导致这种特殊情况发生:

.. code-block:: text
  :caption: 旧消息中的变量值被通过正则等间接手段修改, 而消息刚好被隐藏

  0 (hide): @心爱性行为次数=0@ 被改为 @心爱性行为次数=10@
  ...中间心爱性行为次数不变...
  ===以上消息都没被加载, 只会通过 "仅格式提示词" 设置===
  ...中间心爱性行为次数不变...
  400: 发送消息时, 心爱性行为次数会使用原来游玩时设置的 0 而非 10, 因为 "仅格式提示词" 不能处理隐藏消息

.. code-block:: text
  :caption: 中间的消息被隐藏, 因而变量被设置成旧值

  0: @心爱好感度=10@
  1 (hide): @心爱好感度=20@
  2: 发送消息时, 心爱好感度会从 "仅格式显示" 设置的 20 变成 "仅格式提示词" 设置的 10

========================================================================================================================
前端助手: 本方法的完美补充
========================================================================================================================

如果你会或者能让 ai 帮你写 JavaScript/TypeScript, 你完全可以采用 `前端助手 <https://discord.com/channels/1134557553011998840/1296494001406345318>`_ 来补充这个方案: 相比于用 ai 更新变量, 你可以用代码更新变量.

前端助手允许全局加载脚本并监听酒馆事件. 这样一来，当相应事件触发时，你可以用 ``setChatMessage`` 将 ``@变量=值@`` 添加到楼层消息尾部（就像ai输出 ``@变量=旧值⇒新值@`` 来更新变量那样！），从而主动地在某个楼层更新变量.

此外, 你可以编写一个全局脚本在每次接收到 ai 消息时将所有变量的当前值都加入到该楼层中, 解决之前提到的一些冲突. 由于所有变量值都在最新楼层:

- 你不再需要考虑与总结/摘要正则的冲突问题, 玩家拿到角色卡装了插件直接就能玩.
- 能完美兼容酒馆仅加载前 n 条消息的情况, 对 ``/hide`` 消息进行处理.

具体教程待补充.

========================================================================================================================
用变量条件判断
========================================================================================================================

**不要将复杂条件交给小克判断, 小克很容易产生矛盾.** 老老实实配合 QuickReply 或前端助手进行.

例如, 设置好感度 (影响人物态度) 和认识度 (当前的描述限制):

- 好感度需要认识度达到一定阶段才能到下一阶段
- 认识度需要好感度达到一定值从而触发事件才到下一阶段

**如果只判断其中一个, 小克做得很好.** 但这种左脚踩右脚的结果是死活触发不出来，试了几天变得不幸了. 这种复杂的该用 qr 人为条件判断并启用相应条目了……

但是, 这种正则替代方式依旧有优势, 你完全可以配合它和 QuickReply:

- QuickReply 更新变量后, 删除楼层或重 roll 依旧是更新后的值, 整个聊天的变量全错了
- 这种方式能够保证删除楼层或重 roll 后变量依旧正确