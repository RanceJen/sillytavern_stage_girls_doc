************************************************************************************************************************
脚本用法
************************************************************************************************************************

========================================================================================================================
准备 VSCode
========================================================================================================================

请打开 lorebook_script 文件夹, 注意如果 lorebook_script 里嵌套了一个 lorebook_script 文件夹, 则应该开内层那个.

然后, 按之前说过的方式切换 VSCode 配置文件为 sillytavern.

========================================================================================================================
安装依赖
========================================================================================================================

在 VSCode 中按 :KBD:`Ctrl-Shift-P` 打开命令菜单, 输入 ``toggle terminal`` 以找到 :menuselection:`查看: 切换 终端`, :KBD:`回车` 从而打开 :menuselection:`终端`.

首先我们在打开的 :menuselection:`终端` 输入命令
  .. code-block:: bash

    pip3 install -r requirements.txt

  .. figure:: 输入依赖安装命令.png

然后我们按 :KBD:`回车` 执行命令
  执行后可能会失败, 请按提示解决问题或查询一下报错

========================================================================================================================
配置世界书
========================================================================================================================

要使用脚本, 要先在 ``tavern_sync_config.yaml`` 中告知脚本一些信息:

.. code-block:: yaml

  配置名称:
    世界书本地文件夹: 世界书各条目拆开为单个条目的文件后, 那些文件所在的文件夹. 如 C:/恩赐之主/世界书, 其中 / 也可以换成 \
    世界书酒馆文件: 世界书 json 文件的绝对路径. 如 C:/SillyTavern/data/default-user/worlds/-恩赐之主.json, 其中 / 也可以换成 \
    玩家名: 填入你 <user> 的名字, 则同步时会自动将名字替换成 <user>

  恩赐之主:
    世界书本地文件夹: C:/恩赐之主/世界书
    世界书酒馆文件: C:/SillyTavern/data/default-user/worlds/-恩赐之主.json
    玩家名: 青空莉

``世界书酒馆文件`` **直接填酒馆存档里的世界书** (默认是 ``你的SillyTavern路径/data/default-user/worlds/世界书名字.json``), 不要导出世界书然后填导出的文件路径.

========================================================================================================================
使用脚本的方法
========================================================================================================================

将世界书添加到配置文件后, 你就可以使用脚本.

在 VSCode 中按 :KBD:`Ctrl-Shift-P` 打开命令菜单, 输入 ``toggle terminal`` 以找到 :menuselection:`查看: 切换 终端`, :KBD:`回车` 从而打开 :menuselection:`终端`. 然后你就能以之前配置的 "世界书名称" 使用脚本, 以下我以 :doc:`恩赐之主 </角色卡/恩赐之主/index>` 为例, 提取出它的世界书条目:

首先我们在打开的 :menuselection:`终端` 输入命令
  .. code-block:: bash

    python tavern_sync.py extract 恩赐之主

  .. figure:: 输入提取命令.png

然后我们按 :KBD:`回车` 执行命令
  执行后可能会失败, 请按提示解决问题或查询一下报错

在提取前, 脚本会询问你是否真的要提取, 输入 ``yes`` 并 :KBD:`回车`
  如果运气好, 你已经将条目提取到了 world 中

  .. figure:: 完成命令.png

========================================================================================================================
命令介绍
========================================================================================================================

你可以在终端输入以下命令并 :KBD:`回车`, 来查看有哪些命令可供使用:

.. code-block:: bash

  python tavern_sync.py -h

你可以在终端输入以下命令并 :KBD:`回车`, 来查看对应的命令如何使用:

.. code-block:: bash

  python tavern_sync.py extract -h

------------------------------------------------------------------------------------------------------------------------
提取 (extract)
------------------------------------------------------------------------------------------------------------------------

.. note::

  **如果你的世界书还没有创建, 那么不需要进行提取.** 直接在配置文件里填好设置, 在设置的 `directory` 文件夹里按 :doc:`要求 </工具经验/世界书同步脚本/文件格式/index>` 写独立文件, 然后用 push、pull 指令就能同步了.

该命令允许你将世界书文件中的条目提取成独立文件, 从而开始用这个脚本管理世界书.

.. code-block:: bash

  python tavern_sync.py extract 恩赐之主

默认情况下, 脚本在提取时会自动检测内容是否是 yaml 或 json 格式, 进而用对应的格式提取.

.. figure:: 提取结果.png

  提取时自动转换为了 yaml 格式

你可以加上参数 ``--no_detect`` 来禁用这样的自动检测, 则所有条目都会被提取成 ".md" 文件.

.. code-block:: bash

  python tavern_sync.py extract 恩赐之主 --no_detect

.. warning::

  条目名如果有 ``/`` 或 ``[]`` 等英文输入法下的符号 (半角符号) 可能会提取失败.

------------------------------------------------------------------------------------------------------------------------
推送 (push)
------------------------------------------------------------------------------------------------------------------------

该命令允许你将独立文件中的内容同步到世界书文件中. **如果你正在用酒馆, 推送后请记得刷新网页**; 如果你要导出角色卡, 建议刷新页面后, :doc:`先解除世界书绑定再重新绑定 </常见问题/正确导出新角色卡的方法/index>`.

.. code-block:: bash

  python tavern_sync.py push 恩赐之主

默认情况下, 推送会将所有 yaml 和 json 文件压缩成最省 token 的形式.

.. tabs::

  .. tab:: 推送内容

    .. figure:: 推送内容.png

  .. tab:: 推送结果

    .. figure:: 推送结果.png

你可以加上参数 ``--no_trim`` 来禁用这样的压缩, 则条目将会被原封不动地推送.

------------------------------------------------------------------------------------------------------------------------
监听 (watch)
------------------------------------------------------------------------------------------------------------------------

.. hint::

  对于云酒馆, 你可以添加一个 ``世界书名称: xxx`` 设置来直接支持这个功能. 这样你只需要在本地而无需在 vps 里运行脚本.

该命令将会实时监听世界书文件夹的变动, 并在监听好后立即更新酒馆世界书. 如此, 配合 `世界书同步脚本监听器 <https://github.com/StageDog/lorebook_update_listener>`_, 你将能在本地编辑器实时修改世界书脚本——对本地文件进行修改后, 立即就能在酒馆进行测试.

具体地:

- 执行 ``pip3 install python-socketio tornado watchfiles`` 来安装对应的依赖.
- 安装 `酒馆助手 <https://n0vi028.github.io/JS-Slash-Runner-Doc/>`_, 然后导入 :resource:`此角色卡 <插件/世界书同步脚本监听器/世界书同步脚本监听器.png>`; 如果酒馆助手安装无误, 导入后将会提示安装 "世界书同步脚本监听器" 插件.
- 使用 ``python tavern_sync.py watch 恩赐之主`` 来开启监听服务器, 记住一开始显示的监听地址 (默认为 ``http://localhost:6620``).
- 在扩展设置中找到 :menuselection:`世界书同步脚本监听器`, 填入该地址并启用插件.
- 这样, 你以后只需要使用 ``python tavern_sync.py watch 恩赐之主``, 就能开启实时修改功能了.

------------------------------------------------------------------------------------------------------------------------
拉取 (pull)
------------------------------------------------------------------------------------------------------------------------

该命令允许你将世界书文件中的内容同步到独立文件中.

与提取只是将世界书条目抽取成一个个独立文件不同, 拉取支持我设定的 :doc:`/工具经验/世界书同步脚本/文件格式/index`, 更具有灵活性.

.. code-block:: bash

  python tavern_sync.py pull 恩赐之主

------------------------------------------------------------------------------------------------------------------------
打包 (publish)
------------------------------------------------------------------------------------------------------------------------

该命令允许你将世界书独立文件、角色卡和快速回复打包.

这需要你在配置文件中额外告诉一些信息: (不需要某一部分可以不配置)

.. code-block:: yaml

  配置名称（带发布功能）:
    世界书本地文件夹: 世界书各条目拆开为单个条目的文件后, 那些文件所在的文件夹. 如 C:/三个女孩各有秘密/世界书, 其中 / 也可以换成 \
    世界书酒馆文件: 世界书 json 文件的绝对路径. 如 C:/SillyTavern/data/default-user/worlds/-三个女孩各有秘密.json, 其中 / 也可以换成 \
    玩家名: 填入你 <user> 的名字, 则同步时会自动将名字替换成 <user>
    发布目标文件夹: 要打包到的文件夹路径, 如 C:/发布文件夹
    角色卡: 角色卡路径, 如 C:/SillyTavern/data/default-user/characters/三个女孩各有秘密.png
    源文件文件夹: 要同时发布的原始文件路径, 如 C:/三个女孩各有秘密, 其中有世界书、第一条消息等文件夹, 则将会一并发布

  三个女孩各有秘密:
    世界书本地文件夹: C:/三个女孩各有秘密/世界书
    世界书酒馆文件: C:/SillyTavern/data/default-user/worlds/-三个女孩各有秘密.json
    玩家名: 青空莉
    发布目标文件夹: C:/发布文件夹
    角色卡: C:/SillyTavern/data/default-user/characters/三个女孩各有秘密.png
    源文件文件夹: C:/三个女孩各有秘密

.. code-block:: bash

  python tavern_sync.py publish 三个女孩各有秘密

.. figure:: 发布结果.png

  发布结果

你可以加上参数 ``--should_zip`` 来发布压缩包而不是直接拷贝整个文件夹.

------------------------------------------------------------------------------------------------------------------------
转换为 yaml (to_yaml)
------------------------------------------------------------------------------------------------------------------------

该命令允许你将 json 格式的独立文件转换为 yaml 格式. 由于 json 不支持注释, 带注释的 json 文件不会被转换.

.. code-block:: bash

  python tavern_sync.py to_yaml 恩赐之主

------------------------------------------------------------------------------------------------------------------------
转换为 json (to_json)
------------------------------------------------------------------------------------------------------------------------

该命令允许你将 yaml 格式的独立文件转换为 json 格式. 由于 json 不支持注释, 转换过程中 '#' 开头的注释会丢失.

.. code-block:: bash

  python tavern_sync.py to_json 恩赐之主

.. note::

  我不建议你转成 json.

  - 虽然脚本将独立文件内容推送到世界书文件时为 yaml 和 json 都提供了压缩功能, 但 yaml 压缩地更彻底、更省 token.
  - 利用 :ref:`合集文件` 功能, 无论 yaml 还是 json 都能简单地保持某些需要跨条目的内容结构.